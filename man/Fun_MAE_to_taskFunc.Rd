% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Fun_MAE_to_taskFunc.R
\name{Fun_MAE_to_taskFunc}
\alias{Fun_MAE_to_taskFunc}
\title{Convert MAE to mlr task}
\usage{
Fun_MAE_to_taskFunc(MAE_obj, param.Y.name, param.covariates,
  param_positive_y_level, task_type)
}
\arguments{
\item{MAE_obj}{MAE class}

\item{param.Y.name}{Vector of dependent variable name}

\item{param.covariates}{Vector of coaraiate variable(s) name}

\item{param_positive_y_level}{if ClassifTask, value (character or numeric) to be considered as the positive factor outcome}
}
\value{
mlr's \code{ClassifTask} or \code{RegrTask}
}
\description{
Convert MAE to mlr task
}
\details{
In case of individual MAE assay (omic) with multiple sub-assays, only first sub-assay will be used.
MAE's helpers functions longFormat and wideFormat may not be best candidates, since mlr's functional data require
complete subject structure for all 'assays' ('functionals'). this can be achieved by either removing non-complete subjects,
or by creating dummy entities with NA. (which can later be imputed if required).

Either ClassifTask or RegrTask will be returned, based on the type of the param.Y.name variable
}
\examples{
data(miniACC, package = 'MultiAssayExperiment') # ExpressionSet
miniACC
Fun_MAE_to_taskFunc(miniACC, param.Y.name = 'vital_status', param.covariates = c('gender','days_to_death'), param_positive_y_level = '1')

}
